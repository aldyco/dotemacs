#+TITLE: DotEmacs

* Bootstrap

** Use better defaults

Some UI elements are rather invasive. No-mouse master race.

#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0)                           ; Disable the cursor blinking
  (scroll-bar-mode 0)                             ; Disable the scroll bar
  (tool-bar-mode 0)                               ; Disable the tool bar
  (tooltip-mode 0))                               ; Disable the tooltips
#+END_SRC

Here are what I consider better defaults as per my own experience.

#+BEGIN_SRC emacs-lisp
  (setq-default
   ;; ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   ;; auto-window-vscroll nil                          ; Lighten vertical scroll
   ;; confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
   cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
   ;; delete-by-moving-to-trash t                      ; Delete files to trash
   ;; display-time-default-load-average nil            ; Don't display load average
   display-time-format "%H:%M"                      ; Format the time string
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   ;; indent-tabs-mode nil                             ; Stop using tabs to indent
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   ;; mouse-yank-at-point t                            ; Yank at point rather than pointer
   ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
   recenter-positions '(5 top bottom)               ; Set re-centering positions
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   scroll-margin 10                                 ; Add a margin when scrolling vertically
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   sentence-end-double-space nil                    ; End a sentence after a dot and a space
   show-help-function nil                           ; Disable help messages
   show-trailing-whitespace nil                     ; Display trailing whitespaces
   split-height-threshold nil                       ; Disable vertical window splitting
   split-width-threshold nil                        ; Disable horizontal window splitting
   tab-width 4                                      ; Set width for tabs
   uniquify-buffer-name-style 'forward              ; Uniquify buffer names
   window-combination-resize t                      ; Resize windows proportionally
   x-stretch-cursor t)                              ; Stretch cursor to the glyph width
  (cd "~/")                                         ; Move to the user directory
  (delete-selection-mode 1)                         ; Replace region when inserting text
  (display-time-mode 1)                             ; Enable time in the mode-line
  (fringe-mode 0)                                   ; Disable fringes
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-subword-mode 1)                           ; Iterate through CamelCase words
  (menu-bar-mode 0)                                 ; Disable the menu bar
  (mouse-avoidance-mode 'banish)                    ; Avoid collision of mouse with point
  (put 'downcase-region 'disabled nil)              ; Enable downcase-region
  (put 'upcase-region 'disabled nil)                ; Enable upcase-region
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (global-set-key [remap goto-line] 'goto-line-preview) ; Preview goto-line jump location
  (defun my-backup-file-name (fpath)
	"Return a new file path of a given file path.
  If the new path's directories does not exist, create them."
	(let* (
	   (backupRootDir "~/.emacs.d/backup/")
	   (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
	   (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
	   )
	  (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
	  backupFilePath
	  )
	)

  (setq make-backup-file-name-function 'my-backup-file-name)
  (global-hl-line-mode 1)
  (global-auto-revert-mode 1)
#+END_SRC

Enable fullscreen.

#+BEGIN_SRC emacs-lisp
(if (eq window-system 'ns)
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC

Garbage-collect on focus-out, Emacs /should/ feel snappier.

#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

Xah-fly-keys keybinding
#+BEGIN_SRC emacs-lisp
  (use-package xah-fly-keys
    :ensure t
	:init
	(require 'xah-fly-keys)
    :config
    (xah-fly-keys-set-layout "qwerty") ; required
    (xah-fly-keys 1)
    (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
    (defun my-bindkey-xfk-command-mode ()
      "Define keys for `xah-fly-command-mode-activate-hook'"
      (interactive)
      (define-key xah-fly-key-map (kbd "a")
	(if (fboundp 'counsel-M-x) 'counsel-M-x 'execute-extended-command))
      (define-key xah-fly-key-map (kbd "n")
	(if (fboundp 'me/swiper) 'me/swiper 'isearch-forward))
      (define-key xah-fly-key-map (kbd "SPC /") 'cljr-slash)
      (define-key xah-fly-key-map  (kbd "/") 'xah-goto-matching-bracket))
    (add-hook 'xah-fly-command-mode-activate-hook 'my-bindkey-xfk-command-mode)
  )
#+END_SRC

** Load =.custom.el=

One is able to use the customization interface that is bundled within Emacs. It
is meant to help people who are not familiar with Emacs Lisp in the
configuration of Emacs itself. By default, changes in the customization will be
automatically detected and appended at the end of the configuration file,
=init.el=.

Since that in my case, the actual configuration file is a new one, crafted by
=org-mode=, adding code at the end of =init.el= might mess things up. The
following tells Emacs to add extra code in another file that would be then
loaded, if existing.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

** Load =.secret.el=

I load =~/.emacs.d/.secret.el= to keep sensible things out of version control.
For instance, you could set your identity by customizing both =user-full-name=
and =user-mail-address=. This is also where you want your API tokens to live.

#+BEGIN_SRC emacs-lisp
(defvar me/erc-nick               nil        "The ERC nick to use.")
(defvar me/erc-password           nil        "The ERC password to use.")
(defvar me/erc-port               nil        "The ERC port to use.")
(defvar me/erc-server             nil        "The ERC server to use.")
(defvar me/font-family            "Courier"  "The font to use.")
(defvar me/font-size-default      110        "The font size to use for default text.")
(defvar me/font-size-small        100        "The font size to use for smaller text.")

(let ((secret.el (expand-file-name ".secret.el" user-emacs-directory)))
  (when (file-exists-p secret.el)
    (load secret.el)))
#+END_SRC



* Theme

Load theme and fix some high-level faces to match my personal preferences.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
	:demand t
	:custom
	(doom-themes-enable-bold nil)
	:config
	(load-theme 'doom-one t)
  ;  (with-eval-after-load 'erc-goodies
  ;   (set-face-attribute 'erc-bold-face nil :bold nil))
  ;(with-eval-after-load 'flycheck
	 ; (set-face-attribute 'flycheck-error nil :underline `(:color ,(doom-color 'error) :style line))
  ;    (set-face-attribute 'flycheck-info nil :underline `(:color ,(doom-color 'highlight) :style line))
  ;    (set-face-attribute 'flycheck-warning nil :underline `(:color ,(doom-color 'warning) :style line)))
  ;  (with-eval-after-load 'faces
  ;    (set-face-attribute 'default nil :font me/font-family :height me/font-size-default)
  ;    (set-face-attribute 'header-line nil :box `(:color ,(doom-color 'modeline-bg) :line-width 7))
  ;    (set-face-attribute 'help-argument-name nil :foreground (doom-color 'yellow))
  ;    (set-face-attribute 'variable-pitch nil :family 'unspecified))
  ;  (with-eval-after-load 'font-lock
  ;    (set-face-attribute 'font-lock-doc-face nil :italic t))
   (with-eval-after-load 'isearch
	 (set-face-attribute 'isearch nil :background (doom-color 'blue) :foreground (doom-color 'dark-blue))
	 (set-face-attribute 'lazy-highlight nil :foreground (doom-color 'blue)))
   (with-eval-after-load 'ivy
	 (set-face-attribute 'ivy-minibuffer-match-face-2 nil :background 'unspecified))
   (with-eval-after-load 'markdown
	 (set-face-attribute 'markdown-table-face nil :height me/font-size-small))
  ;  (with-eval-after-load 'outline
  ;    (set-face-attribute 'outline-1 nil :background 'unspecified))
  ;  (with-eval-after-load 'magit-diff
  ;    (set-face-attribute 'magit-diff-added nil :background 'unspecified)
  ;    (set-face-attribute 'magit-diff-hunk-region nil :inherit 'region)
  ;    (set-face-attribute 'magit-diff-removed nil :background 'unspecified))
   (with-eval-after-load 'swiper
	 (set-face-attribute 'swiper-match-face-1 nil :background (doom-color 'bg-alt)))
  )
#+END_SRC


* Languages

** General

*** Ivy

#+BEGIN_QUOTE
Ivy is a generic completion mechanism for Emacs. While it operates similarly to
other completion schemes such as =icomplete-mode=, Ivy aims to be more
efficient, smaller, simpler, and smoother to use yet highly customizable.

[[https://github.com/abo-abo/swiper#ivy][Oleh Krehel]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :hook
    (after-init . ivy-mode)
    :bind
    (:map ivy-minibuffer-map
	  ("C-<down>" . ivy-next-line-and-call)
	  ("C-<up>" . ivy-previous-line-and-call)
	  ("C-c C-r" . ivy-resume)
	  ("C-m" . ivy-alt-done))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-use-selectable-prompt t)
    (setq ivy-wrap t)
    (setq ivy-extra-directories nil)
    (setq enable-recursive-minibuffers t)
    :custom
    (ivy-count-format "")
    (ivy-fixed-height-minibuffer t)
    (ivy-height 20)
    (ivy-initial-inputs-alist nil)
    (ivy-re-builders-alist '((t . ivy--regex-plus)))
    (ivy-format-functions-alist '((t . ivy-format-function-line))))
#+END_SRC

Augment Ivy's interface with details for candidates.

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :hook (after-init . ivy-rich-mode))
#+END_SRC

*** Ivy / Counsel

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :after ivy
  :config
  (counsel-mode 1)
  (setq-default ivy-initial-inputs-alist nil))
(use-package counsel-projectile
  :after ivy
  :config
  (counsel-projectile-mode 1)
  (setq-default ivy-initial-inputs-alist nil))
#+END_SRC

*** Ivy / Swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :preface
  (defun me/swiper ()
    "`swiper' with string returned by `ivy-thing-at-point' as initial input."
    (interactive)
    (swiper (ivy-thing-at-point)))
  :custom (swiper-goto-start-of-match t))
#+END_SRC

*** Smartparens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :bind
    (("M-<backspace>" . sp-unwrap-sexp)
     ("M-<left>" . sp-forward-barf-sexp)
     ("M-<right>" . sp-forward-slurp-sexp)
     ("M-S-<left>" . sp-backward-slurp-sexp)
     ("M-S-<right>" . sp-backward-barf-sexp)
     ("C-<right>" . 'sp-forward-slurp-sexp)
     ("C-<left>" . 'sp-forward-barf-sexp)
     ("C-\"" . 'sp-change-inner)
     ("M-i" . 'sp-change-enclosing))
    :hook
    (after-init . smartparens-global-mode)
    :config
    (require 'smartparens-config)
    (show-paren-mode 1))
#+END_SRC

*** Which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :hook
    (after-init . which-key-mode))
#+END_SRC
